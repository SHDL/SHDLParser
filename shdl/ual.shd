
module ual(a[31..0], b[31..0], cmd[5..0] : s[31..0], setN, setZ, setVC, N, Z, V, C)

   // décodage de la commande
   decoder6to64(cmd[5..0] : oe[63..0])

   // add-sub
   addsub32(a[31..0], b[31..0], cmd[2] : saddsub[31..0], V, C) 
   s[31..0] = saddsub[31..0] | oe[0] + oe[4] + oe[16] + oe[20]

   // umul
   umult16x16(a[15..0], b[15..0] : smul[31..0]) 
   s[31..0] = smul[31..0] | oe[26] 

   // and & andcc
   sand[31..0] = a[31..0] * b[31..0] 
   s[31..0] = sand[31..0] | oe[1] + oe[17]

   // or & orcc
   sor[31..0] = a[31..0] + b[31..0] 
   s[31..0] = sor[31..0] | oe[2] + oe[18]

   // xor & xorcc
   sxor[31..0] = a[31..0]*/b[31..0] + /a[31..0]*b[31..0] 
   s[31..0] = sxor[31..0] | oe[3] + oe[19]

   // signext25
   s[31..0] = a[24]*0b1111111 & a[24..0] | oe[33]

   // signext13
   s[31..0] = a[12]*0b1111111111111111111 & a[12..0] | oe[32]

   // décalage droite & gauche
   barrelshifter32(cmd[0], b[4..0], a[31..0] : sshift[31..0]) 
   s[31..0] = sshift[31..0] | oe[13] + oe[14]

   // sethi24 = décalage de 8 positions
   s[31..0] = a[23..0] & 0b00000000 | oe[35] 

   // nopb
   s[31..0] = b[31..0] | oe[40] 
   
   // N
   N = s[31] 
   
   // Z
   zero32(s[31..0], Z) 

   setN = cmd[4]*/cmd[3] 
   setZ = cmd[4] 
   setVC = cmd[4]*/cmd[1]*/cmd[0] 
   //setN = addcc + subcc + andcc + orcc + xorcc 
   //setZ = addcc + subcc + umulcc + andcc + orcc + xorcc 
   //setVC = addcc + subcc 

end module
