
module sequencer(rst, clk, ir[31..0], N, Z, V, C : oe_num[1..0], areg[4..0], cmd[5..0])
   
   is_calc_instr_reg = ir[31]*/ir[30]*/ir[13]
   is_calc_instr_imm = ir[31]*/ir[30]*ir[13]

   
   fsm synchronous on clk, fetch while rst

      fetch -> decode when /it
      
      decode -> pcplus1 when is_calc_instr_reg
            
      decode -> calc_imm when is_calc_instr_imm
      
      calc_imm -> pcplus1 when 1
      
      pcplus1 -> fetch when 1
      
   end fsm

   
   // computation instruction
   
   // decode -> pcplus1
   areg[4..0] & breg[4..0] & dreg[4..0] & cmd[5..0] & oe[1..0] & write =
      ir[25..21] & ir[25..21] & 0b101010 & 0b100000 & 0b01 & 0  | decode * is_calc_instr_reg
   
   // decode -> calc_imm
   areg[4..0] & breg[4..0] & dreg[4..0] & cmd[5..0] & oe[1..0] & write =
      ir[25..21] & ir[25..21] & 0b101010 & 0b100000 & 0b01 & 0  | decode * is_calc_instr_imm
   
   // calc_imm -> pcplus1
   areg[4..0] & breg[4..0] & dreg[4..0] & cmd[5..0] & oe[1..0] & write =
      ir[25..21] & 0b101010 & ir[25..21] & 0b100000 & 0b01 & 0  | calc_imm
   
   // pcplus1 -> fetch
   areg[4..0] & breg[4..0] & dreg[4..0] & cmd[5..0] & oe[1..0] & write =
      ir[25..21] & ir[25..21] & ir[25..21] & 0b100000 & 0b01 & 0 | pcplus1
   
end module

