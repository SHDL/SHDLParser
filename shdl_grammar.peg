

start
  = Modules


Modules
  = _ head:Module _ tail:Modules
     { return [head].concat(tail); }
  / module:Module { return [module]; }


Module
  = _ "module" _ name:ModuleName _ "(" _ params:ParamList _ ")" _ instances:InstanceList _ "end" _ "module" _
  { return {"name": name, "params": params, "instances":instances}; }


Signal "signal"     
  /* duplicates necessary to eliminate left-recursion for compound signals */
  /* rules for compound signals must be defined first */
  = name:SignalName _ '[' _ i:NaturalInteger ']' _ '&' _ Signal
     { return {"type": "vector", "name": name, "start": i, "stop": i}; }
  / name:SignalName _ '[' _ i:NaturalInteger _ DotDot _ j:NaturalInteger ']' _ '&' _ Signal
     { return {"type": "vector", "name": name, "start": i, "stop": j}; }
  / name:SignalName _ '[' _ i:NaturalInteger _ DotDot _ j:NaturalInteger ']' _ '&' _ Signal
     { return {"type": "vector", "name": name, "start": i, "stop": j}; }
  / name:SignalName _ '&' _ Signal
     { return {"type": "scalar", "name": name, "location": location()}; }
     
  / name:SignalName _ '[' _ i:NaturalInteger ']'
     { return {"type": "vector", "name": name, "start": i, "stop": i}; }
  / name:SignalName _ '[' _ i:NaturalInteger _ DotDot _ j:NaturalInteger ']'
     { return {"type": "vector", "name": name, "start": i, "stop": j}; }
  / name:SignalName _ '[' _ i:NaturalInteger _ DotDot _ j:NaturalInteger ']'
     { return {"type": "vector", "name": name, "start": i, "stop": j}; }
  / name:SignalName
     { return {"type": "scalar", "name": name, "location": location()}; }

DotDot
  = '..'
  / ':'

Arg
  = '_' { return {'type': 'anonymous'}; }
  / Signal

Param
  = Signal

ModuleName "module name"
  = chars:[a-zA-Z0-9_.\-@#$%:]+
     { return chars.join(""); }

SignalName "signal name"
  = chars:[a-zA-Z0-9_.\-@#$%:]+
     { return chars.join(""); }

StateName "state name"
  = chars:[a-zA-Z0-9_.\-@#$%:]+
     { return {'name': chars.join(""), 'location': location()}; }

ParamList
  = head:Param _ separ _ tail:ParamList
     { return [head].concat(tail); }
  / param:Param { return [param]; }

ArgList
  = head:Arg _ separ _ tail:ArgList
     { return [head].concat(tail); }
  / arg:Arg { return [arg]; }

InstanceList
  = head:Instance _ tail:InstanceList
     { return [head].concat(tail); }
  / inst:Instance
     { return [inst]; }

Instance
  = ModuleInstance
  / Assignment
  / TriState
  / Fsm
  / Array


Assignment
  = signal:Signal _ '=' _ equation:SumOfTerms _
     { return {'type': 'assignment', 'signal': signal, 'equation': equation}; }

SumOfTerms "sum of terms"
  = head:Term _ '+' _ tail:SumOfTerms _
     { return {'type': 'sum_of_terms', 'terms':[head].concat(tail['terms'])}; }
  / term:Term
     { return {'type': 'sum_of_terms', 'terms':[term]}; }

Term "term"
  = maxterm:MaxTerm _ '*' _ term:Term
     { return {'type': 'term', 'maxterms': [maxterm].concat(term['maxterms'])}; }
  / maxterm:MaxTerm
     { return {'type': 'term', 'maxterms': [maxterm]}; }
  / value:NaturalInteger
     { return {'type': 'constant', 'value': value}; }


MaxTerm "maxterm"
  = signal:Signal
     { return {'type':'maxterm', 'signal':signal, 'inverted': false}; }
  / '/' _ signal:Signal
     { return {'type':'maxterm', 'signal':signal, 'inverted': true}; }


TriState
  = signal:Signal _ '=' _ equation:SumOfTerms _ ':' _ oe:MaxTerm
     { return {'type': 'tri_state', 'signal': signal, 'equation': equation, oe: oe }; }


ModuleInstance
  = name:ModuleName _ '(' _ args:ArgList _ ')'
     { return {'type': 'module_instance', 'name': name, 'arguments': args}; }


Array
  = 'array' _ input:Signal _ '->' _ output:Signal _ values:(ArrayValue*) _ 'end' _ 'array'
     { return { 'type': 'array', 'input': input, 'output': output, 'values': values }; }

ArrayValue
  = input:NaturalInteger _ '->' _ output:Integer _
     { return { 'input': input, 'output': output }; }
     

Fsm
  = FsmKeyword _ header:FsmHeader _ rules:FsmRules _ 'end' _ FsmKeyword
     { return {'type': 'fsm', 'header': header, 'rules': rules}; }

FsmKeyword
  = 'fsm' / 'statemachine'
  
FsmHeader
  = 'asynchronous'
     { return {'type': 'asynchronous'}; }
  / init:SignalName _ 'while' _ rst:StateName _ ','? _ 'synchronous' _ 'on' _ clk:SignalName
     { return {'type': 'synchronous', 'rst': rst, 'clk': clk, 'init': init}; }
  / 'synchronous' _ 'on' _ clk:SignalName _ ','? _ init:SignalName _ 'while' _ rst:StateName
     { return {'type': 'synchronous', 'rst': rst, 'clk': clk, 'init': init}; }

FsmRule
  = leftStates:FsmRuleLeft _ '->' _ rightState:StateName _ 'when' _ condition:SumOfTerms _ (';'/',')?
     { return {'type':'fsm_rule', 'left_states': leftStates, 'right_state': rightState, 'condition': condition}; }

FsmRuleLeft
  = StateNameList
  / '*'

FsmRules
  = head:FsmRule _ tail:FsmRules { return [head].concat(tail); }
  / rule:FsmRule { return [rule]; }

StateNameList
  = head:StateName _ ',' _ tail:StateNameList { return [head].concat(tail); }
  / state:StateName { return [state]; }




NaturalInteger
  = '0b' [0-1]+
    { return parseInt(text(), 2); }
  / '0x' [0-9abcdefABCDEF]+
    { return parseInt(text(), 16); }
  / [0-9]+
    { return parseInt(text(), 10); }

Integer
  = value:NaturalInteger     
    { return value; }
  / '-' _ value:NaturalInteger     
    { return -value; }


separ
  = ',' { return []; }
  / ':' { return []; }

_ "whitespace"
  = ( whiteSpace / lineTerminator / enclosedComment / lineComment )*
     { return []; }

whiteSpace 
  = [\t\v\f \u00A0\uFEFF] 

lineTerminator 
  = [\n\r] 

enclosedComment 
  = "/*" (!"*/" anyCharacter)* "*/" 

lineComment 
  = "//" (!lineTerminator anyCharacter)* 

anyCharacter 
  = . 

