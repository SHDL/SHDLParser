

start
  = Modules


Modules
  = _ head:Module _ tail:Modules
     { return [head].concat(tail); }
  / module:Module { return [module]; }


Module
  = _ "module" _ name:ModuleName _ "(" _ params:ParamList _ ")" _ instances:InstanceList _ "end" _ "module" _
  { return {"name": name, "params": params, "instances":instances}; }


Signal
  = name:SignalName _ '[' _ i:NaturalInteger ']'
     { return {"type": "vector", "name": name, "start": i, "stop": i, "location": location()}; }
  / name:SignalName _ '[' _ i:NaturalInteger _ DotDot _ j:NaturalInteger ']'
     { return {"type": "vector", "name": name, "start": i, "stop": j, "location": location()}; }
  / name:SignalName _ '[' _ i:NaturalInteger _ DotDot _ j:NaturalInteger ']'
     { return {"type": "vector", "name": name, "start": i, "stop": j, "location": location()}; }
  / name:SignalName
     { return {"type": "scalar", "name": name, "location": location()}; }

SignalCompound
  = signal:Signal _ '&' _ compound:SignalCompound
     { return [signal].concat(compound); }
  / signal:Signal
  { return [signal]; }


DotDot
  = '..'
  / ':'

Arg
  = '_' { return {'type': 'anonymous'}; }
  / Signal

Param
  = Signal

ModuleName "module name"
  = chars:[a-zA-Z0-9_.\-@#$%:]+
     { return chars.join(""); }

SignalName "signal name"
  = chars:[a-zA-Z0-9_.\-@#$%:]+
     { return chars.join(""); }

StateName "state name"
  = chars:[a-zA-Z0-9_.\-@#$%:]+
     { return {'name': chars.join(""), 'location': location()}; }

ParamList
  = head:Param _ separ _ tail:ParamList
     { return [head].concat(tail); }
  / param:Param { return [param]; }

ArgList
  = head:Arg _ separ _ tail:ArgList
     { return [head].concat(tail); }
  / arg:Arg { return [arg]; }

InstanceList
  = head:Instance _ tail:InstanceList
     { return [head].concat(tail); }
  / inst:Instance
     { return [inst]; }

Instance
  = ModuleInstance
  / TriState
  / Assignment
  / Fsm
  / Map


ExpressionCompound
  = head:Expression _ '&' _ tail:ExpressionCompound
     { return [head].concat(tail); }
  / expression:Expression
  { return [expression]; }

Expression
  = head:Term _ '+' _ tail:Expression
  { return [head].concat(tail); }
  / term:Term
  { return [term]; }
  
Term
  = head:Factor _ '*' _ tail:Term
  { return [head].concat(tail); }
  / factor:Factor
  { return [factor]; }

Factor
  = '(' _ expr:Expression _ ')'
  { return expr; }
  / signal:Signal
     { return {'type':'maxterm', 'signal':signal, 'inverted': false}; }
  / '/' _ signal:Signal
     { return {'type':'maxterm', 'signal':signal, 'inverted': true}; }



Assignment
  = left:SignalCompound _ '=' _ right:ExpressionCompound _
     { return {'type': 'assignment', 'leftPart': left, 'rightPart': right}; }

TriState
  = left:SignalCompound _ '=' _ right:ExpressionCompound _ '|' _ oe:Expression
     { return {'type': 'tri_state', 'leftPart': left, 'rightPart': right, oe: oe }; }


ModuleInstance
  = name:ModuleName _ '(' _ args:ArgList _ ')'
     { return {'type': 'module_instance', 'name': name, 'arguments': args}; }


Map
  = 'map' _ input:SignalCompound _ '->' _ output:SignalCompound _ values:(MapValue*) _ 'end' _ 'map'
     { return { 'type': 'array', 'input': input, 'output': output, 'values': values }; }

MapValue
  = input:BitField _ '->' _ output:BitField _
     { return { 'input': input, 'output': output }; }
     

Fsm
  = FsmKeyword _ header:FsmHeader _ rules:FsmRules _ 'end' _ FsmKeyword
     { return {'type': 'fsm', 'header': header, 'rules': rules}; }

FsmKeyword
  = 'fsm' / 'statemachine'
  
FsmHeader
  = 'asynchronous'
     { return {'type': 'asynchronous'}; }
  / init:StateName _ 'while' _ rst:SignalName _ ','? _ 'synchronous' _ 'on' _ clk:SignalName
     { return {'type': 'synchronous', 'rst': rst, 'clk': clk, 'init': init}; }
  / 'synchronous' _ 'on' _ clk:SignalName _ ','? _ init:StateName _ 'while' _ rst:SignalName
     { return {'type': 'synchronous', 'rst': rst, 'clk': clk, 'init': init}; }

FsmRule
  = leftStates:FsmRuleLeft _ '->' _ rightState:StateName _ 'when' _ condition:Expression _ (';'/',')?
     { return {'type':'fsm_rule', 'left_states': leftStates, 'right_state': rightState, 'condition': condition}; }
  / leftStates:FsmRuleLeft _ '->' _ rightState:StateName
     { return {'type':'fsm_rule', 'left_states': leftStates, 'right_state': rightState }; }

FsmRuleLeft
  = StateNameList
  / '*'

FsmRules
  = head:FsmRule _ tail:FsmRules { return [head].concat(tail); }
  / rule:FsmRule { return [rule]; }

StateNameList
  = head:StateName _ ',' _ tail:StateNameList { return [head].concat(tail); }
  / state:StateName { return [state]; }



BitField
  = '0b' [0-1]+
    { return parseInt(text(), 2); }
  / '0x' [0-9abcdefABCDEF]+
    { return parseInt(text(), 16); }

NaturalInteger
  = [0-9]+
    { return parseInt(text(), 10); }


separ
  = ',' { return []; }
  / ':' { return []; }

_ "whitespace"
  = ( whiteSpace / lineTerminator / enclosedComment / lineComment )*
     { return []; }

whiteSpace 
  = [\t\v\f \u00A0\uFEFF] 

lineTerminator 
  = [\n\r] 

enclosedComment 
  = "/*" (!"*/" anyCharacter)* "*/" 

lineComment 
  = "//" (!lineTerminator anyCharacter)* 

anyCharacter 
  = . 

