/*
* Usage : bla bla
* Bla bla
*
*/
module alarm(rst, clk, en, delay[7..0] : alarm)
   // 8-bit counter
   count8Z(rst, clk, en, idle : cnt[7..0], _)
   // compare counter value 'cnt' with 'delay'
   eq8(cnt[7..0], delay[7..0] : equal)
   // finite state machine acting on 'en' and 'equal', producing 'alarm'
   // (fsm states can be used as signals in their container module, the active state being '1' and all others '0')
   fsm synchronous on clk, idle while rst
      * -> idle when /en,
      idle, busy -> busy when en*/equal,
      busy -> alarm when en*equal,
      alarm -> alarm when en,
      alarm -> idle when /en
   end fsm
   
end module




