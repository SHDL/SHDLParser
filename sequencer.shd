
module sequencer(rst, clk, ir[31..0], N, Z, V, C : oe_num[1..0], areg[4..0], cmd[5..0])
   
   is_calc_instr = ir[31]*/ir[30]*/ir[13]
   is_calc_instr_imm = ir[31]*/ir[30]*ir[13]

   fsm synchronous on clk, fetch while rst
   
      fetch -> it1 when it
      
      it1 -> it2 when 1
      
      it2 -> fetch when 1
      
      fetch -> decode when /it
      
      decode -> pcplus1 when is_calc_instr
            
      decode -> calc_imm when is_calc_instr_imm   
      
      pcplus1 -> fetch when 1
      
   end fsm
   
   areg[4..0] = ir[25..21] : decode * is_calc_instr
   areg[4..0] = 31 : decode * is_calc_instr_imm
   
   breg[4..0] = ir[4..0] : decode * calc_reg
   dreg[4..0] = ir[29..24] : decode * calc_reg
   cmd[5..0] = ir[23..19] : decode * calc_reg
   oe_num[1..0] = 1 : decode * calc_reg
   
end module

