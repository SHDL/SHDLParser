
module flipflopT(rst, clk, en, t : on, off)
   statemachine off while rst, synchronous on clk
      off -> off when /t + /en
      on -> on when /t + /en
      off -> on when t * en
      on -> off when t * en
   end fsm
end module

module count2Z(rst, clk, en, sclr : q[1..0], allone)
	flipflopT(rst, clk, en, t[0] : q[0])
	flipflopT(rst, clk, en, t[1] : q[1])
	t[0] = /sclr + q[0]
	t[1] = /sclr*q[0] + q[1]
	allone = q[0] * q[1]
end module

module count4Z(rst, clk, en, sclr : q[3..0], allone)
	count2Z(rst, clk, en, sclr : q[1..0], alloneL)
	enH = en*alloneL + en*sclr
	count2Z(rst, clk, enH, sclr : q[3..2], alloneH)
	allone = alloneL * alloneH
end module

module count8Z(rst, clk, en, sclr : q[7..0], allone)
	count4Z(rst, clk, en, sclr : q[3..0], alloneL)
	enH = en*alloneL + en*sclr
	count4Z(rst, clk, enH, sclr : q[7..4], alloneH)
	allone = alloneL * alloneH
end module

